---
alwaysApply: true
---

# Development Workflow Mandate

## 1. Planning Phase: Outline the Implementation

Before writing any code, your first step is to generate two detailed planning documents.

-   **Action:** Create and describe a "implementation plan" and a "test case plan".
-   **Implementation Plan:** The "implementation plan" must outline the required functions, files and planned changes (excluding unit testing, as this will be done in the test case plan). Note that if function is not needed in the component file, please move it out into a service file named [FileName].service.tsx. If there are common functions used between files, please move them to a common/services.tsx file.
-   **Test Case Plan:** For each step in the implementation plan, the "test case plan" must describe the specific unit tests to be written. This should include asserting whether UI elements exist, happy and fail paths, edge cases, and error handling scenarios.
-   **Granularity:** Each step in both plans must be atomic, corresponding to **only a single file or a single function**.
-   **Confirmation:** Wait for user's confirmation. Do not proceed until the plan is confirmed.

## 2. Implementation Phase: Write the Code

-   **Action:** Write the actual source code for each function
-   **Code Quality:** The implementation **must be generic and robust**. Do not hard-code values or logic specifically to pass the tests. The code must solve the general problem and handle a variety of inputs, not just the examples defined in the test cases.
-   **Reference:** Continuously refer to the "implementation plan" to ensure your code aligns with the agreed-upon architecture and logic.
-   **Completion:** The task is only complete when all unit tests for the feature are passing.
-   **Coding convention:** For all react code:
    -   Use TypeScript code with TailwindCSS
    -   Use explicit type annotations on all constants
    -   Use full descriptive variable names instead of abbreviations like idsRes or first6
    -   If function is not needed in the component file, please move it out into a service file named [FileName].service.tsx
